const int acc = 1 # [m/s^2] acceleration
const int velVert = 5 # [m/s] vertical speed
const int vetHor = 1 # [m/s] horizontal speed
int rotTime = 6 # [s]

#Calcuates the time the elevator needs to reach maximum velocity (maxPositive = 5m/s maxNegative = 0 m/s)
def accTime(stoppingDistance)
    float timeA
    float timeOld
    timeOld = timeA
    if status is acceleration:
        timeAcc = (sqrt(2*acc*stopDist)) + timeOld
        timeAcc = round(timeAcc, 2)
    return timeAcc

#Time needed fo cambin to move the distance "dist"
def velTime(stoppingDistance)
    float timeV
    float timeOld
    timeOld = timeV
    if status is velocity:
        float timeVel = (vel/dist) +timeOld
        timeVel = round(timeVel, 2)
    return timeVel

#Complete time the cabin need (include accelaration and breaks) from point A to B
def compTime(velTime, accTime, boardingTime, rotationSpeed)
    float time
    time = velTime + accTime + boardingTime + rotationSpeed
    return time

#Calculates the distance to stop until the elevator has to stop to reach the destination
def stoppingDistance(accTime)
    float stopDist = (acc*time^2)/2
    stopDist = round(stopDist,2)
    if stopDist > moveDist:
        move()              
    else:
        accTime(stopDist)
        startBreak(timeAcc) #yet to be implemented
    return stopDist

#Set the appropariet speed 5m/s vertical, 1m/s horizontal and moves the elevator
def move()
    if direction is "vertical":
        vel = vertVel
    else:
        vel = horVel
    return vel

#Time needed per person to get into the elevator 
def boardingTime(passengers)
    int boardtimeTime = 4 + passengers
    return boardTime

def rotationSpeed(numOfExchanger)
    int exchangeTime = numOfExchanger * rotTime
    return exchangeTime 

